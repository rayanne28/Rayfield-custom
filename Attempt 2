-- UI_Library.lua (ModuleScript)
local UILibrary = {}
UILibrary.__index = UILibrary

-- Create a new UI instance
function UILibrary.new(name, position, size)
    local ui = {}
    setmetatable(ui, UILibrary)
    
    -- Create a ScreenGui for the UI
    ui.Gui = Instance.new("ScreenGui")
    ui.Gui.Name = name or "UILibraryGui"
    ui.Gui.Parent = game.Players.LocalPlayer.PlayerGui
    
    -- Create the main window
    ui.Window = ui:createWindow(position, size)
    
    -- Initialize components
    ui.Tabs = {}
    ui.Toggles = {}
    ui.Sliders = {}
    ui.Buttons = {}
    ui.Notifications = {}
    
    return ui
end

-- Create a draggable window
function UILibrary:createWindow(position, size)
    local window = Instance.new("Frame")
    window.Position = position or UDim2.new(0.5, -150, 0.5, -100)
    window.Size = size or UDim2.new(0, 300, 0, 400)
    window.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Dark theme
    window.BorderSizePixel = 0
    
    -- Add drag functionality
    local dragging, dragStart, startPos
    window.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = window.Position
        end
    end)
    window.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                                      startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Add close button (X)
    local closeButton = Instance.new("TextButton")
    closeButton.Text = "X"
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -20, 0, 0)
    closeButton.Parent = window
    
    return window
end

-- Add a tab
function UILibrary:addTab(name)
    local tabButton = Instance.new("TextButton")
    tabButton.Text = name
    tabButton.Size = UDim2.new(0, 100, 0, 30)
    tabButton.Position = UDim2.new(0, (#self.Tabs * 100), 0, 0)
    tabButton.Parent = self.Window
    
    local tabContent = Instance.new("Frame")
    tabContent.Size = UDim2.new(1, 0, 1, -30)
    tabContent.Position = UDim2.new(0, 0, 0, 30)
    tabContent.Visible = false
    tabContent.Parent = self.Window
    
    table.insert(self.Tabs, {Button = tabButton, Content = tabContent})
    
    -- Handle tab switching
    tabButton.MouseButton1Click:Connect(function()
        for _, tab in pairs(self.Tabs) do
            tab.Content.Visible = false
        end
        tabContent.Visible = true
    end)
    
    return tabContent
end

-- Add a toggle (checkbox)
function UILibrary:addToggle(tab, name, default, callback)
    local toggle = Instance.new("TextButton")
    toggle.Text = name
    toggle.Size = UDim2.new(0, 200, 0, 30)
    toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    toggle.Parent = tab
    
    local check = Instance.new("Frame")
    check.Size = UDim2.new(0, 20, 0, 20)
    check.Position = UDim2.new(1, -20, 0, 5)
    check.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
    check.Parent = toggle
    
    toggle.MouseButton1Click:Connect(function()
        local newState = not (check.BackgroundColor3 == Color3.fromRGB(0, 255, 0))
        check.BackgroundColor3 = newState and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
        if callback then callback(newState) end
    end)
    
    table.insert(self.Toggles, toggle)
    return toggle
end

-- Add a slider
function UILibrary:addSlider(tab, name, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 200, 0, 50)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    sliderFrame.Parent = tab
    
    local text = Instance.new("TextLabel")
    text.Text = name .. ": " .. default
    text.Size = UDim2.new(1, 0, 0, 20)
    text.Parent = sliderFrame
    
    local slider = Instance.new("TextButton")
    slider.Text = ""
    slider.Size = UDim2.new(1, -20, 0, 20)
    slider.Position = UDim2.new(0, 10, 0, 20)
    slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    slider.Parent = sliderFrame
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    fill.Parent = slider
    
    local dragging, startX, value
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            startX = input.Position.X
            value = (input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X * (max - min) + min
            fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
            text.Text = name .. ": " .. math.floor(value)
            if callback then callback(value) end
        end
    end)
    slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local newValue = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X * (max - min) + min, min, max)
            fill.Size = UDim2.new((newValue - min) / (max - min), 0, 1, 0)
            text.Text = name .. ": " .. math.floor(newValue)
            if callback then callback(newValue) end
        end
    end)
    
    table.insert(self.Sliders, sliderFrame)
    return sliderFrame
end

-- Add a button
function UILibrary:addButton(tab, name, callback)
    local button = Instance.new("TextButton")
    button.Text = name
    button.Size = UDim2.new(0, 200, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.Parent = tab
    
    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
    
    table.insert(self.Buttons, button)
    return button
end

-- Add a notification
function UILibrary:showNotification(message, duration)
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 200, 0, 50)
    notification.Position = UDim2.new(0.5, -100, 0, -60)
    notification.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    notification.Parent = self.Gui
    
    local text = Instance.new("TextLabel")
    text.Text = message
    text.Size = UDim2.new(1, 0, 1, 0)
    text.Parent = notification
    
    -- Animate in
    notification:TweenPosition(UDim2.new(0.5, -100, 0, 10), "Out", "Quad", 0.5)
    
    -- Remove after duration
    delay(duration or 3, function()
        notification:TweenPosition(UDim2.new(0.5, -100, 0, -60), "In", "Quad", 0.5)
        wait(0.5)
        notification:Destroy()
    end)
end

return UILibrary
